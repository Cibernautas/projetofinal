
#########################################   Codigos.gs

function doPost(e) {
  try {
    const SPREADSHEET_ID = "12IQiTtVMCg2ie6GEgCdTnk-NdZdBE9Gs_h3gXXGSZWs";
    const MIDIA_SHEET_NAME = "MIDIA";
    const DRIVE_FOLDER_ID = "1zaJ0UXaoediou4GQQp9YS_LSAwYBtlFU";

    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
    const params = e.parameter;

    Logger.log("üìù Par√¢metros recebidos:");
    Logger.log(JSON.stringify(params));

    const tipoFormulario = (params.TipoFormulario || "DENUNCIA").toUpperCase();
    const sheet = ss.getSheetByName(tipoFormulario);
    const midiaSheet = ss.getSheetByName(MIDIA_SHEET_NAME);

    if (!sheet) throw new Error(`A aba "${tipoFormulario}" n√£o existe na planilha.`);

    const denunciaId = Utilities.getUuid(); // ID √∫nico

    // üîé Coleta m√≠dias
    let midiaLinks = [];
    Logger.log("üîç Procurando m√≠dias...");
    for (let key in params) {
      if (key.startsWith("MidiaBase64_")) {
        Logger.log("üì∏ M√≠dia encontrada: " + key);
        const base64 = params[key].split(',')[1];
        const blob = Utilities.newBlob(Utilities.base64Decode(base64), "image/jpeg", `foto_${Date.now()}.jpg`);
        const file = folder.createFile(blob);
        file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
        const link = getDirectDownloadLink(file);
        Logger.log("üîó Link gerado: " + link);
        midiaLinks.push(link);
      }
    }

    // üìå Assinatura
    let assinaturaURL = "Sem assinatura";
    if (params.AssinaturaBase64 && params.AssinaturaBase64.includes(",")) {
      const base64Data = params.AssinaturaBase64.split(',')[1];
      const blob = Utilities.newBlob(Utilities.base64Decode(base64Data), "image/png", `assinatura_${params.Nome}_${Date.now()}.png`);
      const file = folder.createFile(blob);
      file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      assinaturaURL = getDirectDownloadLink(file);
    }

    const pdfURL = gerarDenunciaPDF(params, assinaturaURL, midiaLinks);

    // ‚¨áÔ∏è Linha para aba do formul√°rio
    const novaLinha = [
      new Date(),
      params.Nome || "",
      params.Documento || "",
      params.Localizacao || "",
      params.TipoProblema || "",
      params.DescricaoProblema || "",
      denunciaId,
      assinaturaURL,
      pdfURL
    ];
    sheet.appendRow(novaLinha);

    // ‚¨áÔ∏è Linha para aba MIDIA
    if (midiaLinks.length > 0) {
      Logger.log("üì• Salvando na aba MIDIA com ID: " + denunciaId);
      midiaSheet.appendRow([denunciaId, ...midiaLinks]);
    } else {
      Logger.log("‚ö†Ô∏è Nenhuma m√≠dia para salvar.");
    }

    // üìß E-mail
    const destinatario = "marcosfeitosapalmas2@gmail.com";
    const assunto = `Nova Den√∫ncia - ${params.TipoProblema || "Problema n√£o especificado"}`;
    const corpo = `
Ol√°,

Uma nova den√∫ncia foi registrada:

üìå Nome: ${params.Nome || "N√£o informado"}
üìç Localiza√ß√£o: ${params.Localizacao || "N√£o informado"}
üìÑ Tipo de Problema: ${params.TipoProblema || "N√£o informado"}
üìù Descri√ß√£o:
${params.DescricaoProblema || "N√£o informado"}

üìé Link do PDF:
${pdfURL}
    `;
    MailApp.sendEmail(destinatario, assunto, corpo);

    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      message: "Den√∫ncia registrada e e-mail enviado!",
      pdf: pdfURL
    })).setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    Logger.log("‚ùå ERRO: " + err.toString());
    return ContentService.createTextOutput(JSON.stringify({
      status: "error",
      message: err.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}
#########################################   pdf.gs

function gerarDenunciaPDF(data, assinaturaURL, midiaLinks) {
  const folderId = "1zaJ0UXaoediou4GQQp9YS_LSAwYBtlFU";
  const templateId = "1OfdeHjlEZ8LuWLG4zOAFcWF5mtMuZzNWkFBFjPQeWd0";

  const copy = DriveApp.getFileById(templateId).makeCopy(`Den√∫ncia - ${data.Nome}`, DriveApp.getFolderById(folderId));
  const presentation = SlidesApp.openById(copy.getId());
  let slide = presentation.getSlides()[0];

  const margin = 40;
  const largura = 480;
  let y = 30;
  const maxY = 750;

  function addBloco(titulo, conteudo, espaco = 10) {
    if (y + 40 > maxY) {
      slide = presentation.appendSlide(SlidesApp.PredefinedLayout.BLANK);
      y = 30;
    }
    const t = slide.insertTextBox(titulo, margin, y, largura, 20);
    t.getText().getTextStyle().setFontSize(14).setBold(true);
    y += 18;
    const c = slide.insertTextBox(conteudo, margin, y, largura, 300);
    c.getText().getTextStyle().setFontSize(12);
    y += c.getHeight() + espaco;
  }

  // Cabe√ßalho com data e ID
  const dataAtual = new Date().toLocaleString();
  const denunciaId = data.ID || "ID n√£o encontrado";
  const cabecalho = `üóìÔ∏è Data: ${dataAtual}\nüÜî ID da Den√∫ncia: ${denunciaId}`;
  const titulo = slide.insertTextBox("üì¢ DEN√öNCIA DE INFRAESTRUTURA URBANA", margin, y, largura, 30);
  titulo.getText().getTextStyle().setFontSize(18).setBold(true);
  y += 35;
  slide.insertTextBox(cabecalho, margin, y, largura, 30).getText().getTextStyle().setFontSize(12);
  y += 35;

  // Dados compactos
  const dados = `
üë§ Nome: ${data.Nome}
ü™™ Documento: ${data.Documento}
üìç Localiza√ß√£o: ${data.Localizacao}
üí° Tipo: ${data.TipoProblema}
üìù Descri√ß√£o: ${data.DescricaoProblema}
  `;
  addBloco("üìã Dados da Den√∫ncia", dados, 15);

  // M√≠dias
  if (midiaLinks.length > 0) {
    const midiaTexto = midiaLinks.map((link, i) => `üîó Foto ${i + 1}: ${link}`).join("\n");
    addBloco("üìé M√≠dias Enviadas", midiaTexto, 15);
  }

  // Assinatura
  if (assinaturaURL && assinaturaURL !== "Sem assinatura") {
    if (y + 100 > maxY) {
      slide = presentation.appendSlide(SlidesApp.PredefinedLayout.BLANK);
      y = 30;
    }
    slide.insertTextBox("‚úçÔ∏è Assinatura", margin, y, largura, 20).getText().getTextStyle().setFontSize(14).setBold(true);
    y += 20;
    const blob = UrlFetchApp.fetch(assinaturaURL).getBlob();
    slide.insertImage(blob, margin, y, 200, 60);
    y += 65;
  }

  presentation.saveAndClose();

  const pdf = DriveApp.getFileById(presentation.getId()).getAs("application/pdf");
  const folder = DriveApp.getFolderById(folderId);
  const pdfFile = folder.createFile(pdf);
  pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  return "https://drive.google.com/uc?export=download&id=" + pdfFile.getId();
}

}
#########################################   getdirect.gs

function getDirectDownloadLink(file) {
  return "https://drive.google.com/uc?export=download&id=" + file.getId();
}


#########################################   consultarMidias.gs

function myFunction() {
  function consultarMidias(idRegistro) {
  const PLANILHA_ID = "12IQiTtVMCg2ie6GEgCdTnk-NdZdBE9Gs_h3gXXGSZWs";
  const midiasSheet = SpreadsheetApp.openById(PLANILHA_ID).getSheetByName("MIDIA");
  const dados = midiasSheet.getDataRange().getValues();

  for (let i = 1; i < dados.length; i++) {
    if (dados[i][0] == idRegistro) {
      return dados[i].slice(1).filter(String).join(" | ");
    }
  }

  return "Sem m√≠dias encontradas";
}

}
